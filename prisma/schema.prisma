generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./schemas"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  score         Int       @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id   String @id @default(cuid())
  word String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  guesses      Guess[]
  participants Participant[]

  duration Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, createdAt])
}

model Participant {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalScore Int @default(0)

  guesses Guess[]
  games   Game[]
}

model Guess {
  id String @id @default(cuid())

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  participantId String
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  guess    String
  distance Int

  score Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
